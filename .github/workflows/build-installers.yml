name: Build Cross-Platform Installers

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Generate gear set data
      run: |
        python scripts/generate_gear_data.py
        
    - name: Create icon
      run: |
        python scripts/create_icon.py || echo "Icon creation failed, continuing without icon"
        
    - name: Build Windows executable
      run: |
        pyinstaller esolog-tail.spec
        
    - name: Create Windows installer package
      run: |
        mkdir dist\installer
        copy dist\esolog-tail.exe dist\installer\
        copy README.md dist\installer\
        echo @echo off > dist\installer\run.bat
        echo echo ESO Live Encounter Log Sets and Abilities Analyzer >> dist\installer\run.bat
        echo echo =============================================== >> dist\installer\run.bat
        echo echo. >> dist\installer\run.bat
        echo echo Starting analyzer in test mode... >> dist\installer\run.bat
        echo echo Press Ctrl+C to stop >> dist\installer\run.bat
        echo echo. >> dist\installer\run.bat
        echo esolog-tail.exe --test-mode >> dist\installer\run.bat
        echo pause >> dist\installer\run.bat
        
    - name: Get version
      id: version
      run: |
        python -c "from src.version import __version__; print(f'VERSION={__version__}')" >> $GITHUB_OUTPUT
        
    - name: Create Windows installer archive
      run: |
        cd dist
        powershell Compress-Archive -Path installer -DestinationPath esolog-tail-windows-installer-${{ steps.version.outputs.VERSION }}.zip
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: esolog-tail-win-${{ steps.version.outputs.VERSION }}
        path: dist/esolog-tail-windows-installer-${{ steps.version.outputs.VERSION }}.zip

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Generate gear set data
      run: |
        python scripts/generate_gear_data.py
        
    - name: Create icon
      run: |
        python scripts/create_icon.py || echo "Icon creation failed, continuing without icon"
        
    - name: Build macOS executable
      run: |
        pyinstaller esolog-tail.spec
        
    - name: Create macOS installer package
      run: |
        mkdir -p dist/installer
        cp dist/esolog-tail dist/installer/
        cp README.md dist/installer/
        echo '#!/bin/bash' > dist/installer/run.sh
        echo 'echo "ESO Live Encounter Log Sets & Abilities Analyzer"' >> dist/installer/run.sh
        echo 'echo "================================================="' >> dist/installer/run.sh
        echo 'echo ""' >> dist/installer/run.sh
        echo 'echo "Starting analyzer in test mode..."' >> dist/installer/run.sh
        echo 'echo "Press Ctrl+C to stop"' >> dist/installer/run.sh
        echo 'echo ""' >> dist/installer/run.sh
        echo './esolog-tail --test-mode' >> dist/installer/run.sh
        chmod +x dist/installer/run.sh
        
    - name: Get version
      id: version
      run: |
        python -c "from src.version import __version__; print(f'VERSION={__version__}')" >> $GITHUB_OUTPUT
        
    - name: Create macOS installer archive
      run: |
        cd dist
        zip -r esolog-tail-macos-installer-${{ steps.version.outputs.VERSION }}.zip installer/
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: esolog-tail-mac-${{ steps.version.outputs.VERSION }}
        path: dist/esolog-tail-macos-installer-${{ steps.version.outputs.VERSION }}.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Generate gear set data
      run: |
        python scripts/generate_gear_data.py
        
    - name: Create icon
      run: |
        python scripts/create_icon.py || echo "Icon creation failed, continuing without icon"
        
    - name: Build Linux executable
      run: |
        pyinstaller esolog-tail.spec
        
    - name: Create Linux installer package
      run: |
        mkdir -p dist/installer
        cp dist/esolog-tail dist/installer/
        cp README.md dist/installer/
        echo '#!/bin/bash' > dist/installer/run.sh
        echo 'echo "ESO Live Encounter Log Sets & Abilities Analyzer"' >> dist/installer/run.sh
        echo 'echo "================================================="' >> dist/installer/run.sh
        echo 'echo ""' >> dist/installer/run.sh
        echo 'echo "Starting analyzer in test mode..."' >> dist/installer/run.sh
        echo 'echo "Press Ctrl+C to stop"' >> dist/installer/run.sh
        echo 'echo ""' >> dist/installer/run.sh
        echo './esolog-tail --test-mode' >> dist/installer/run.sh
        chmod +x dist/installer/run.sh
        
    - name: Get version
      id: version
      run: |
        python -c "from src.version import __version__; print(f'VERSION={__version__}')" >> $GITHUB_OUTPUT
        
    - name: Create Linux installer archive
      run: |
        cd dist
        tar -czf esolog-tail-linux-installer-${{ steps.version.outputs.VERSION }}.tar.gz installer/
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: esolog-tail-linux-${{ steps.version.outputs.VERSION }}
        path: dist/esolog-tail-linux-installer-${{ steps.version.outputs.VERSION }}.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Get version
      id: version
      run: |
        python -c "from src.version import __version__; print(f'VERSION={__version__}')" >> $GITHUB_OUTPUT
        
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: esolog-tail-win-${{ steps.version.outputs.VERSION }}
        path: ./artifacts/windows
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: esolog-tail-mac-${{ steps.version.outputs.VERSION }}
        path: ./artifacts/macos
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: esolog-tail-linux-${{ steps.version.outputs.VERSION }}
        path: ./artifacts/linux
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/windows/esolog-tail-windows-installer-${{ steps.version.outputs.VERSION }}.zip
          ./artifacts/macos/esolog-tail-macos-installer-${{ steps.version.outputs.VERSION }}.zip
          ./artifacts/linux/esolog-tail-linux-installer-${{ steps.version.outputs.VERSION }}.tar.gz
        generate_release_notes: true
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
